package com.incquerylabs.iot.leapmotion.proto2emf.queries

import "http://incquerylabs.com/iot/leapmotion/lmemf"
import "http://incquerylabs.com/iot/leapmotion/lmemf_base"
import "http://www.eclipse.org/emf/2002/Ecore"

// Complex gesture patterns - GRAB
pattern allExtended(frame : Frame, hand : Hand) {
	find frameHand(frame, hand);
	find frameFingers(frame, fingers);
	find allFingersExtended(fingers);
}

pattern allBent(frame : Frame, hand : Hand) {
	find frameHand(frame, hand);
	find frameFingers(frame, fingers);
	find allFingersBent(fingers);
}

pattern allBentRight(frame : Frame) {
	find allBent(frame, hand);
	find rightHand(hand);
}

pattern allBentLeft(frame : Frame) {
	find allBent(frame, hand);
	find leftHand(hand);
}

pattern allExtendedRight(frame : Frame) {
	find allExtended(frame, hand);
	find rightHand(hand);
}

pattern allExtendedLeft(frame : Frame) {
	find allExtended(frame, hand);
	find leftHand(hand);
}

// Complex gesture patterns - Speed control
pattern leftSpeedUp(gesture : Gesture) {
	find clockwiseCircleGesture(gesture);
	find leftHandGesture(gesture);
}

pattern leftSlowDown(gesture : Gesture) {
	find nonClockwiseCircleGesture(gesture);
	find leftHandGesture(gesture);
}

pattern rightSpeedUp(gesture : Gesture) {
	find clockwiseCircleGesture(gesture);
	find rightHandGesture(gesture);
}

pattern rightSlowDown(gesture : Gesture) {
	find nonClockwiseCircleGesture(gesture);
	find rightHandGesture(gesture);
}

// Complex gesture patterns - Stop


// Gesture helper patterns
pattern rightHandGesture(gesture : Gesture) {
	Gesture.hands.frontmost(gesture, hand);
	find rightHand(hand);
}

pattern leftHandGesture(gesture : Gesture) {
	Gesture.hands.frontmost(gesture, hand);
	find leftHand(hand);
}

pattern clockwiseCircleGesture(gesture : Gesture) {
	find circleGestureVectors(gesture, NV, DV);
	find vectorZ(NV, NZ);
	find vectorZ(DV, DZ);
	check(DZ * NZ > 0.0);
}

pattern nonClockwiseCircleGesture(gesture : Gesture) {
	find circleGestureVectors(gesture, NV, DV);
	find vectorZ(NV, NZ);
	find vectorZ(DV, DZ);
	check(DZ * NZ <= 0.0);
}

pattern circleGesture(gesture : Gesture) {
	Gesture.type(gesture, ::TYPE_CIRCLE);
	find continuousGesture(gesture, _);
}

pattern circleGestureVectors(gesture : Gesture, NV : Vector, DV : Vector) {
	Gesture.pointables.frontmost(gesture, pointable);
	find circleGesture(gesture);
	find pointableDirection(pointable, DV);
	find gestureNormal(gesture, NV);
}

pattern continuousGesture(gesture : Gesture, duration : ELong) {
	Gesture.duration(gesture, duration);
}

pattern tapGesture(gesture : Gesture) {
	Gesture.type(gesture, ::TYPE_KEY_TAP);
} or {
	Gesture.type(gesture, ::TYPE_SCREEN_TAP);
}

// Vector helper patterns
pattern pointableDirection(pointable : Pointable, DV : Vector) {
	Pointable.direction(pointable, DV);
}

pattern gestureNormal(gesture : Gesture, NV : Vector) {
	Gesture.normal(gesture, NV);
}

pattern vectorZ(vector : Vector, z : EFloat) {
	Vector.z(vector, z);
}


// Hand helper patterns
pattern grabStrengthHigh(hand : Hand) {
	find grabStrength(hand, S);
	check(S > 0.5f);
}

pattern frameHand(frame : Frame, hand : Hand) {
	Frame.hands.elements(frame, hand);
}

pattern grabStrength(hand : Hand, S : EFloat) {
	Hand.grabStrength(hand, S);
}

pattern rightHand(hand : Hand) {
	Hand.right(hand, right);
	check(right == true);
}

pattern leftHand(hand : Hand) {
	Hand.left(hand, left);
	check(left == true);
}

// Finger helper patterns
pattern frameFingers(frame : Frame, fingers : FingerList) {
	Frame.fingers(frame, fingers);
}

pattern handFingers(hand : Hand, fingers : FingerList) {
	Hand.fingers(hand, fingers);
}

pattern allFingersExtended(fingers : FingerList) {
	find extendedFingers(fingers, N);
	check(N == 5);
}

pattern allFingersBent(fingers : FingerList) {
	find extendedFingers(fingers, N);
	check(N == 0);
}

pattern extendedFingers(fingers : FingerList, N : EInt) {
	N == count find extendedFinger(fingers, _);
}

pattern extendedFinger(fingers : FingerList, finger : Finger) {
	FingerList.extended(fingers, finger);
}

