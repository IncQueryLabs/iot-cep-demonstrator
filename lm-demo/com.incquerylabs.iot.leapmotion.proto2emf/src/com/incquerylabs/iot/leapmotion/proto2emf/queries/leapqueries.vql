package com.incquerylabs.iot.leapmotion.proto2emf.queries

import "http://incquerylabs.com/iot/leapmotion/lmemf"
import "http://incquerylabs.com/iot/leapmotion/lmemf_base"
import "http://www.eclipse.org/emf/2002/Ecore"

pattern allExtended(frame : Frame) {
	find extendedFinger(frame, N);
	check(N == 5);
}

pattern allBent(frame : Frame) {
	find extendedFinger(frame, N);
	check(N == 0);
}

pattern circleGesture(gesture : Gesture) {
	Gesture.type(gesture, ::TYPE_CIRCLE);
	find continuousGesture(gesture, _);
}

pattern clockwiseCircleGesture(gesture : Gesture) {
	find circleGesture(gesture);
	find pointableNormal(gesture, DZ, NZ);
	check(DZ * NZ > 0.0);
}

pattern nonClockwiseCircleGesture(gesture : Gesture) {
	find circleGesture(gesture);
	find pointableNormal(gesture, DZ, NZ);
	check(DZ * NZ <= 0.0);
}

pattern continuousGesture(gesture : Gesture, duration : ELong) {
	Gesture.duration(gesture, duration);
}

pattern pointableNormal(gesture : Gesture, DZ : EFloat, NZ : EFloat) {
	Gesture.pointables.frontmost(gesture, pointable);
	Pointable.direction.z(pointable, DZ);
	Gesture.normal.z(gesture, NZ);
}

pattern clockwiseRoll(gesture : Gesture) {
	find clockwiseCircleGesture(gesture);
	find continuousGesture(gesture, _);
}

pattern grabStrengthHigh(frame : Frame) {
	Frame.hands.frontmost(frame, hand);
	find grabStrength(hand, S);
	check(S > 0.5f);
}

pattern grabStrength(hand : Hand, S : EFloat) {
	Hand.grabStrength(hand, S);
}

pattern extendedFinger(frame : Frame, N : EInt) {
	Frame.fingers(frame, fingerList);
	FingerList.^count(fingerList, N);
}
